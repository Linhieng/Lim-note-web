import{_ as i,c as s,o as l,a2 as a}from"./chunks/framework.pPPfHAGV.js";const g=JSON.parse('{"title":"ES 版本历史","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ES6/ES_Version.md","filePath":"docs/ES6/ES_Version.md"}'),e={name:"docs/ES6/ES_Version.md"},t=a(`<h1 id="es-版本历史" tabindex="-1">ES 版本历史 <a class="header-anchor" href="#es-版本历史" aria-label="Permalink to &quot;ES 版本历史&quot;">​</a></h1><p>内容摘录自 <a href="https://www.w3schools.com/js/js_versions.asp" target="_blank" rel="noreferrer">w3schools</a>。 写在这里仅做复习参考</p><h2 id="es5-2009-新特性" tabindex="-1">ES5 (2009) 新特性 <a class="header-anchor" href="#es5-2009-新特性" aria-label="Permalink to &quot;ES5 (2009) 新特性&quot;">​</a></h2><ul><li>&quot;use strict&quot;</li><li>字符串 <ul><li>String[number] access</li><li>Multiline strings</li><li>trim()</li></ul></li><li>数组 <ul><li>Array.isArray()</li><li>forEach()</li><li>map()</li><li>filter()</li><li>reduce()</li><li>reduceRight()</li><li>every()</li><li>some()</li><li>indexOf()</li><li>lastIndexOf()</li></ul></li><li>JSON <ul><li>JSON.parse()</li><li>JSON.stringify()</li></ul></li><li>Date <ul><li>Date.now()</li><li>toISOString()</li><li>toJSON()</li></ul></li><li>对象 <ul><li>Property getters and setters.</li><li>Reserved words as property names</li><li></li><li>Object.create(parent, donor)</li><li>Object.defineProperty(object, property, descriptor)</li><li>Object.defineProperties(object, descriptors)</li><li>Object.getOwnPropertyDescriptor(object, property)</li><li>Object.getOwnPropertyNames(object)</li><li>Object.getPrototypeOf(object)</li><li>Object.keys(object)</li><li></li><li>Object.preventExtensions(object)</li><li>Object.isExtensible(object)</li><li>Object.seal(object)</li><li>Object.isSealed(object)</li><li>Object.freeze(object)</li><li>Object.isFrozen(object)</li></ul></li><li>Function bind()</li><li>Trailing commas <ul><li>ES5 allows trailing commas in object and array definitions.</li></ul></li></ul><p>对象描述符（descriptor）</p><ul><li>value</li><li>writable</li><li>enumerable</li><li>configurable</li></ul><h2 id="es6-2015-新特性" tabindex="-1">ES6 (2015) 新特性 <a class="header-anchor" href="#es6-2015-新特性" aria-label="Permalink to &quot;ES6 (2015) 新特性&quot;">​</a></h2><ul><li>变量声明关键字 <ul><li>The let keyword</li><li>The const keyword</li></ul></li><li>Arrow Functions <ul><li>箭头函数内的 this 永远保持为闭合词法上下文的值</li></ul></li><li>The Spread (...) Operator</li><li>for..of <ul><li>注意，for..in 在 ES1 (1997) 的时候就出现了</li></ul></li><li>Map Objects 和 Set Objects <ul><li>Map 最重要的特性就是支持将对象作为 key</li></ul></li><li>Classes 注意 js 中的类不是对象，而是对象的模版</li><li>Promises</li><li>Symbol</li><li>Default Parameters 支持函数定义默认参数值</li><li>Function Rest Parameter 函数参数支持使用 ... 获取剩余参数</li><li>字符串 <ul><li>String.includes()</li><li>String.startsWith()</li><li>String.endsWith()</li></ul></li><li>数组 <ul><li>Array.from()</li><li>Array.of()</li><li>keys()</li><li>find()</li><li>findIndex()</li><li>entries()</li></ul></li><li>New Math Methods <ul><li>Math.trunc()</li><li>Math.sign()</li><li>Math.cbrt()</li><li>Math.log2()</li><li>Math.log10()</li></ul></li><li>New Number Properties <ul><li>Number.EPSILON</li><li>Number.MIN_SAFE_INTEGER</li><li>Number.MAX_SAFE_INTEGER</li></ul></li><li>New Number Methods <ul><li>Number.isInteger()</li><li>Number.isSafeInteger() 范围是 <code>1 - 2**53</code> 到 <code>2**53 - 1</code> （均包含）</li></ul></li><li>New Global Methods <ul><li>isFinite()</li><li>isNaN()</li></ul></li><li>JavaScript Modules 浏览器支持模块</li></ul><h2 id="es-2016-新特性" tabindex="-1">ES 2016 新特性 <a class="header-anchor" href="#es-2016-新特性" aria-label="Permalink to &quot;ES 2016 新特性&quot;">​</a></h2><ul><li>JavaScript Exponentiation (**)</li><li>JavaScript Exponentiation assignment (**=)</li><li>JavaScript Array includes()</li></ul><h2 id="es-2017-新特性" tabindex="-1">ES 2017 新特性 <a class="header-anchor" href="#es-2017-新特性" aria-label="Permalink to &quot;ES 2017 新特性&quot;">​</a></h2><ul><li>字符串 <ul><li>padStart()</li><li>padEnd()</li></ul></li><li>对象 <ul><li>Object.entries() <ul><li>可以更方便的转换对象为 Map。<code>new Map(Object.entries(obj))</code></li></ul></li><li>Object.values()</li><li>Object.getOwnPropertyDescriptors</li></ul></li><li>async 和 await</li><li>Trailing Commas in Functions</li></ul><h2 id="es-2018-新特性" tabindex="-1">ES 2018 新特性 <a class="header-anchor" href="#es-2018-新特性" aria-label="Permalink to &quot;ES 2018 新特性&quot;">​</a></h2><ul><li>Asynchronous Iteration</li><li>Promise.prototype.finally()</li><li>支持对象结构赋值 <code>const {x, y, z} = {x:1, y:2, z:3}</code></li><li>New RegExp Features <ul><li>Unicode Property Escapes (<code>\\p{...}</code>)</li><li>Lookbehind Assertions (<code>?&lt;=</code> ) and (<code>?&lt;!</code> )</li><li>Named Capture Groups</li><li><code>s</code> (dotAll) Flag</li></ul></li><li>新增内置对象 SharedArrayBuffer</li></ul><h2 id="es-2019" tabindex="-1">ES 2019 <a class="header-anchor" href="#es-2019" aria-label="Permalink to &quot;ES 2019&quot;">​</a></h2><ul><li>字符串 <ul><li>trimStart()</li><li>trimEnd()</li></ul></li><li>对象 <ul><li>Object.fromEntries()</li></ul></li><li>try catch 中支持省略参数 <ul><li>之前 <code>try {} catch (err) {}</code></li><li>现在 <code>try {} catch {}</code></li></ul></li><li>数组 <ul><li>flat()</li><li>flatMap()</li><li>修改 sort() 为稳定排序</li></ul></li><li>修正 JSON.stringify()，让其支持 U+D800 to U+DFFF 访问内的字符 <ul><li>比如 <code>JSON.stringify([&#39;\\u26D4&#39;])</code> 能正确解析 ⛔ 字符，而不是乱码</li></ul></li><li>修正 <code>\\u2028</code> 和 <code>\\u2029</code> 的错误。在此之前，代码 <code>let text = &quot;\\u2028&quot;</code> 会被认为是终结符而导致报错</li><li>修正函数的 toString() 方法，规定所有浏览器都应该访问原始代码文本，包括空白符和注释。</li></ul><h2 id="es2020" tabindex="-1">ES2020 <a class="header-anchor" href="#es2020" aria-label="Permalink to &quot;ES2020&quot;">​</a></h2><ul><li>新增基础类型 BigInt</li><li>字符串 <ul><li>matchAll()</li></ul></li><li>The Nullish Coalescing Operator (<code>??</code>) <ul><li>只将 null 和 undefined 识别为假，false, 0, NaN 等都视为真</li></ul></li><li>The Optional Chaining Operator (?.)</li><li>Logical AND Assignment Operator (<code>&amp;&amp;=</code>) <ul><li>a &amp;&amp;= b 如果 a 为真值，则将 b 赋给 a</li></ul></li><li>Logical OR Assignment Operator (<code>||=</code>) <ul><li>a ||= b 如果 a 为假值，则将 b 赋给 a</li></ul></li><li>Nullish Coalescing Assignment Operator (<code>??=</code>) <ul><li>a ??= b 如果 a 为 null/undefined，则将 b 赋给 a</li></ul></li><li>添加 Promise.allSettled() 函数</li></ul><p>对 Promise.allSettled 和 all 的对比案例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reject, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;failure&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allSettled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //      { status: &#39;fulfilled&#39;, value: &#39;success&#39; },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //      { status: &#39;rejected&#39;, reason: &#39;failure&#39; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果使用 all，由于其中一个异步任务返回 reject，所以最终会报错</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reason)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 只输出 failure</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="es2021" tabindex="-1">ES2021 <a class="header-anchor" href="#es2021" aria-label="Permalink to &quot;ES2021&quot;">​</a></h2><ul><li>新增 Promise.any() <ul><li>只返回第一个兑现的值。如果全部都被拒绝，则也返回拒绝</li></ul></li><li>新增 String.prototype.replaceAll()</li><li>新增 JavaScript Numeric Separator (_) <ul><li>注意只能用于中间，比如 <code>1_000_000_000</code></li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reject, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;failure1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reject, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;failure2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reasons</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reasons.errors))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [ &#39;failure1&#39;, &#39;failure2&#39; ]</span></span></code></pre></div><h2 id="es2022" tabindex="-1">ES2022 <a class="header-anchor" href="#es2022" aria-label="Permalink to &quot;ES2022&quot;">​</a></h2><ul><li>数组 <ul><li>at() 用于实现负数反向索引</li></ul></li><li>字符串 <ul><li>at()</li></ul></li><li>正则 <code>d</code> 标识</li><li>对象 <ul><li>Object.hasOwn()</li></ul></li><li>支持 Error Cause</li><li>支持 await import</li><li>类 <ul><li>支持 Class Field Declarations</li><li>支持 Private Methods and Fields。使用 <code>#</code> 前缀标识</li></ul></li></ul><h2 id="es2023" tabindex="-1">ES2023 <a class="header-anchor" href="#es2023" aria-label="Permalink to &quot;ES2023&quot;">​</a></h2><ul><li>数组 <ul><li>findLast()</li><li>findLastIndex()</li><li>toReversed() 返回新数组，而不修改原数组</li><li>toSorted() 返回新数组，而不修改原数组</li><li>toSpliced() 返回新数组，而不修改原数组 <ul><li>splice 早在 chrome 1 就支持</li></ul></li></ul></li><li><code>#!/usr/bin/env node</code></li></ul>`,27),n=[t];function h(k,p,r,E,d,o){return l(),s("div",null,n)}const u=i(e,[["render",h]]);export{g as __pageData,u as default};
