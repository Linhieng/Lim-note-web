import{_ as e,c as a,o,a2 as t}from"./chunks/framework.pPPfHAGV.js";const m=JSON.parse('{"title":"Vue3","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Vue/响应式/README.md","filePath":"docs/Vue/响应式/README.md"}'),c={name:"docs/Vue/响应式/README.md"},i=t('<h1 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h1><p>常用的有以下函数</p><ul><li><code>reactive()</code></li><li><code>shallowReactive()</code></li><li><code>readonly()</code></li></ul><p>查看源码时常用有：</p><ul><li><code>isReactive()</code></li><li><code>isShaddow()</code></li><li><code>toRaw()</code></li></ul><h2 id="源码解析说明" tabindex="-1">源码解析说明 <a class="header-anchor" href="#源码解析说明" aria-label="Permalink to &quot;源码解析说明&quot;">​</a></h2><p>单纯看笔记效率肯定是很低的，一定要调试源码来学习。当然，要是有机会，我觉得录视频或者直播讲解一些源码解析过程也不错。</p><p>我认为的优秀的代码就是将具体的实现逻辑封装在函数里面了，也就是所谓的抽象。这样一来，别人看你代码时，他不需要知道这个函数具体实现逻辑，只需要知道调用该函数的目的和结果是什么就可以。同样的，在学习源码时也是这样，先大概的过一遍，看看那些函数名是干什么的，然后再一个一个函数的去拆开，看看具体逻辑是如何实现的。</p><p>查阅源码时，gitLen 插件很有用，因为某些代码是解决某些 issue 的，通过查阅 issue 能更好的理解代码。</p>',9),d=[i];function l(s,r,_,n,u,p){return o(),a("div",null,d)}const f=e(c,[["render",l]]);export{m as __pageData,f as default};
