import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.pPPfHAGV.js";const g=JSON.parse('{"title":"草稿","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Svelte/draft.md","filePath":"docs/Svelte/draft.md"}'),t={name:"docs/Svelte/draft.md"},l=n(`<h1 id="草稿" tabindex="-1">草稿 <a class="header-anchor" href="#草稿" aria-label="Permalink to &quot;草稿&quot;">​</a></h1><h2 id="svelte-的响应式是由赋值语句触发的-非赋值语句不会触发-它是如何实现的" tabindex="-1">Svelte 的响应式是由赋值语句触发的，非赋值语句不会触发，它是如何实现的？ <a class="header-anchor" href="#svelte-的响应式是由赋值语句触发的-非赋值语句不会触发-它是如何实现的" aria-label="Permalink to &quot;Svelte 的响应式是由赋值语句触发的，非赋值语句不会触发，它是如何实现的？&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        foo: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bar: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // obj.foo.bar += 1 通过这种方式就会触发响应式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        foo.bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 这种方式就不会触发响应式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.foo.bar;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on:click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{addNumber}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Add {sum}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="svelte-中的-each-的-key-不能使用下标" tabindex="-1">Svelte 中的 each 的 key 不能使用下标 <a class="header-anchor" href="#svelte-中的-each-的-key-不能使用下标" aria-label="Permalink to &quot;Svelte 中的 each 的 key 不能使用下标&quot;">​</a></h2><p><a href="https://www.svelte.cn/tutorial/keyed-each-blocks" target="_blank" rel="noreferrer">案例</a></p><p>简单说一下 key 的作用，当整个数组 <code>things</code> 变化时，默认会重新渲染所有元素。 但通过指定 key 则可以减少渲染次数。</p><p>具体来说，当 key 不变时，不会重新渲染该元素，当 key 改变时，则会重新渲染该元素（卸载之前的元素）。</p><div class="language-svelte vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">svelte</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 如果使用 (i) 作为 key，则无效。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{#</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> things </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {color, id}, i (id)  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Thing</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">={color} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">={i} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8),h=[l];function e(p,k,E,r,d,c){return a(),i("div",null,h)}const y=s(t,[["render",e]]);export{g as __pageData,y as default};
