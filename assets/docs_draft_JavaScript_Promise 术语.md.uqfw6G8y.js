import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.pPPfHAGV.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/draft/JavaScript/Promise 术语.md","filePath":"docs/draft/JavaScript/Promise 术语.md"}'),t={name:"docs/draft/JavaScript/Promise 术语.md"},l=n(`<p>本文的 Promise 中文术语来自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise - MDN 文档</a> ，术语解释依据来自 MDN 文档推荐的 <a href="https://thenewtoys.dev/blog/2021/02/08/lets-talk-about-how-to-talk-about-promises/" target="_blank" rel="noreferrer">Let&#39;s talk about how to talk about promises</a> 参考文章。</p><p>本文将介绍 Promise 的以下术语:</p><ul><li><strong>待定(pending)</strong></li><li><strong>兑现(fulfilled)</strong></li><li><strong>兑现值(fulfillment value)</strong></li><li><strong>拒绝(rejected)</strong></li><li><strong>拒绝理由(rejection reason)</strong></li><li><strong>敲定(settled)</strong></li><li><strong>解决(resolve)</strong></li><li><strong>锁定(locked in)</strong></li></ul><p>本文仅介绍这些术语，不会介绍 Promise 的基本使用。</p><h2 id="🍕-promise-状态" tabindex="-1">🍕 Promise 状态 <a class="header-anchor" href="#🍕-promise-状态" aria-label="Permalink to &quot;🍕 Promise 状态&quot;">​</a></h2><p>一个 Promise 对象只可能有三种状态, 并且这三种状态是互斥的:</p><ul><li><strong>待定</strong> ，这是大部分 Promise 对象的初始状态。</li><li>已 <strong>兑现</strong> ，此时的 Promise 对象会传递一个 <strong>兑现值</strong> 给 <code>then()</code>。</li><li>已 <strong>拒绝</strong> ，此时的 Promise 对象会传递一个 <strong>拒绝理由</strong> 给 <code>catch()</code>。</li></ul><p>这几个术语是 Promise 的基础，而且也是很好懂的。示例代码如下（运行在浏览器环境下）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pendingPromise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pendingPromise) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出： Promise {&lt;pending&gt;}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fulfillPromise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;兑现值&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fulfillPromise) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出： Promise {&lt;fulfilled&gt;: &#39;兑现值&#39;}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rejectPromise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;拒绝理由&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rejectPromise) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出： Promise {&lt;rejected&gt;: &#39;拒绝理由&#39;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rejectPromise.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reason)}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被拒绝的 Promise 对象, 会抛出错误, 需要通过 catch() 获取</span></span></code></pre></div><h2 id="🍕-敲定-settled" tabindex="-1">🍕 <em>敲定(settled)</em> <a class="header-anchor" href="#🍕-敲定-settled" aria-label="Permalink to &quot;🍕 *敲定(settled)*&quot;">​</a></h2><p>当一个 Promise 对象的状态是已 <strong>兑现</strong> 或者 已 <strong>拒绝</strong> 时, 我们称呼该 Promise 已经被 <strong>敲定</strong>。</p><h2 id="🍕-解决-resolve" tabindex="-1">🍕 <em>解决(resolve)</em> <a class="header-anchor" href="#🍕-解决-resolve" aria-label="Permalink to &quot;🍕 *解决(resolve)*&quot;">​</a></h2><p><strong>解决</strong> 这个术语最开始是来自 <a href="https://promisesaplus.com/#the-promise-resolution-procedure" target="_blank" rel="noreferrer">Promises/A+ 规范</a>。 在规范中它表示一个抽象的操作。</p><p><strong>解决</strong> 一个 Promise 对象有下面三种方式：</p><ul><li>通过调用 <code>new Promise()</code> 中提供的 <code>resolve()</code> 方法。</li><li>通过调用 <code>Promise.resolve()</code> 创建一个已经 <strong>解决</strong> 的 Promise 对象。</li><li>在 promise 机制控制的回调函数中 <code>return</code> 一个值（没有 <code>return</code> 时该值默认是 <code>undefined</code>）。</li></ul><blockquote><p>备注：所谓 promise 机制控制的回调函数，指的是该回调函数什么时候能执行是由 promise 机制控制的，典型的有 <code>then()</code> 中的回调函数。</p></blockquote><h2 id="🍕-锁定-locked-in" tabindex="-1">🍕 <em>锁定(locked in)</em> <a class="header-anchor" href="#🍕-锁定-locked-in" aria-label="Permalink to &quot;🍕 *锁定(locked in)*&quot;">​</a></h2><p>当 Promise A 对象 与 Promise B 对象 <strong>锁定</strong> 时（英文为： resolve A to B ），遵循下面规则：</p><ul><li>当 Promise B 对象被 <strong>兑现</strong> （或者已经是被 <strong>兑现</strong> ）时， Promise A 也会被 <strong>兑现</strong> ，并且 <strong>兑现值</strong> 和 Promise B 的相同。</li><li>当 Promise B 对象被 <strong>拒绝</strong> （或者已经是被 <strong>拒绝</strong> ）时， Promise A 也会被 <strong>拒绝</strong> ，并且 <strong>拒绝理由</strong> 和 Promise B 的相同。</li><li>当 Promise B 对象未 <strong>敲定</strong> 时， Promise A 也不会 <strong>敲定</strong>。</li></ul><p>下面的场景中，将会 <strong>锁定</strong> 两个 Promise 对象：</p><ul><li>调用 <code>new Promise()</code> 中提供的 <code>resolve()</code> 方法时，传入的参数是一个 Promise 对象， 此时构造出来的 Promise 对象与传入的参数 <strong>锁定</strong> 。</li><li><code>Promise.resolve(input)</code> 中的 <code>input</code> 是一个 Promise 对象时， <code>Promise.resolve()</code> 返回的 Promise 对象将会与 <code>input</code> <strong>锁定</strong> 。</li><li>在 promise 机制控制的回调函数中返回的值 <code>val</code> 是一个 Promise 对象时， 回调函数返回的 Promise 对象将会与 <code>val</code> <strong>锁定</strong>。</li></ul><blockquote><p>备注：promise 机制控制的回调函数始终都会返回一个 Promise 对象，无论回调函数中返回的是什么。（可能不太严谨）</p><ul><li>如果回调函数中返回的是非 Promise 对象，则它会作为 Promise 对象的 <strong>兑现值</strong>。</li><li>如果回调函数中返回的是 Promise 对象，则两个 Promise 对象会 <strong>锁定</strong>。</li></ul></blockquote><p>所以，当一个 Promise 被 <strong>解决</strong> 时，该 Promise 对象的状态不一定会改变的。（有些人可能会以为 <strong>解决</strong> 一个 Promise 时该 Promise 状态会变成 <strong>兑现</strong>）</p><h2 id="🍕-通过代码介绍-解决-resolve-和-锁定-locked-in" tabindex="-1">🍕 通过代码介绍 <em>解决(resolve)</em> 和 <em>锁定(locked in)</em> <a class="header-anchor" href="#🍕-通过代码介绍-解决-resolve-和-锁定-locked-in" aria-label="Permalink to &quot;🍕 通过代码介绍 *解决(resolve)* 和 *锁定(locked in)*&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;firstResult&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  4️⃣ 在某个时间点, Promise A 被 &quot;解决&quot;，此时 Promise A 的状态为已 &quot;兑现&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">firstResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;secondResult&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6️⃣ 在某个时间点, Promise C 被 &quot;解决&quot; 了, 此时 Promise C 的状态是已 &quot;兑现&quot;。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                              //    同时，由于 Promise B 与 Promise C 锁定，所以 Promise B 的状态也会变成已 &quot;兑现&quot;，其 &quot;兑现值&quot; 和 Promise C 的一样。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  2️⃣ 当调用 doStuff() 时, first() 执行并返回一个 Promise A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">firstResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  3️⃣ 当调用 Promise A 的 then() 方法时, 该 then() 方法也会创建一个 Promise B 并返回。 该 Promise B 就是 doStuff 返回的 Promise 对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firstResult) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  5️⃣ 当 Promise A &quot;兑现&quot; 时, 就会执行 second(), 这个 second() 也会返回一个 Promise C 。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                 //     由于该回调函数(promise 机制控制的回调函数) 返回了一个值，所以 Promise B 被 &quot;解决&quot; 了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                 //     同时，因为返回的值是 Promise C，所以 Promise B 与 Promise C &quot;锁定&quot;。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                 //     此时❗ 虽然 Promise B 被 &quot;解决&quot; 了，但他的状态不变 —— &quot;待定&quot;，因为 Promise C 的状态是 &quot;待定&quot;。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1️⃣</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secondResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(secondResult) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 7️⃣ 当 Promise B 状态变为 &quot;兑现&quot; 时（取决于 Promise C ），该回调函数将被调用。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><ol><li>调用 <code>doStuff()</code></li><li><code>doStuff()</code> 会调用 <code>first()</code> 函数，此时 <code>first()</code> 函数返回一个 Promise A 对象。</li><li>调用 Promise A 的 <code>then()</code> 方法时，该 <code>then()</code> 会创建一个 Promise B 对象， Promise B 就是 <code>doStuff()</code> 返回的 Promise 对象。 并且该 <code>then()</code> 方法中传入了一个由一个回调函数 callback A ，该回调函数的执行时机是由 promise 机制控制的。</li><li>在某个时间点， Promise A 被通过调用 <code>resolve()</code> 的方式 <strong>解决</strong> ，此时 Promise A 的状态会变成 <strong>兑现</strong> ，并且携带 <strong>兑现值</strong></li><li>当 Promise A 被 <strong>兑现</strong> 后，由 promise 机制控制的 callback A 执行， <code>second()</code> 被调用， 因为 <code>second()</code> 返回一个 Promise C 对象，所以此时 Promise B 被 <strong>解决</strong> 了，但是❗ Promise B 的状态还是 <strong>待定</strong> ，因为 Promise B 与 Promise C <strong>锁定</strong> 了。</li><li>在某个时间点， Promise C <strong>兑现</strong> 了， 此时 Promise B 状态也会是 <strong>兑现</strong> ，其 <strong>兑现值</strong> 和 Promise C 一致。</li><li>当 Promise B <strong>兑现</strong> 时， Promise B 对应的 <code>then()</code> 中的回调函数将被执行</li></ol><p>上面的解释也适用 <code>async/await</code> ，比如下面代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">firstResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> firstResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firstResult)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li><code>doStuff()</code> 函数被调用时，会调用 <code>first()</code> 函数。</li><li>当 <code>first()</code> 函数返回的 Promise A 的状态变为 <strong>兑现</strong> 时， doStuff 调用 <code>second()</code> ，同时创建并返回一个已经 <strong>解决</strong> 了的 Promise B 对象，该 Promise B 对象会与 <code>second()</code> 返回的 Promise C 对象 <strong>锁定</strong>。在 Promise C 对象 <strong>敲定</strong> 之前， Promise B 对象的状态始终是 <strong>待定</strong>。</li></ol><h2 id="🍕-总结" tabindex="-1">🍕 总结 <a class="header-anchor" href="#🍕-总结" aria-label="Permalink to &quot;🍕 总结&quot;">​</a></h2><ul><li>Promise 对象只有三种互斥状态 <strong>待定</strong>、<strong>兑现</strong> 和 <strong>拒绝</strong></li><li>Promise 对象被 <strong>兑现</strong> 时会有一个 <strong>兑现值</strong> 传递给 <code>then()</code></li><li>Promise 对象被 <strong>拒绝</strong> 时会有一个 <strong>拒绝理由</strong> 传递 <code>catch()</code></li><li>当 Promise 对象的状态不是 <strong>待定</strong> 时，我们称呼该 Promise 被 <strong>敲定</strong> 了。</li><li>当 <strong>解决</strong> 一个 Promise 对象时，它的状态不一定会改变。</li><li>多个 Promise 对象可以通过 <strong>锁定</strong> 的方式确保他们按序执行。（这也就是 Promise 链）</li></ul><p>在实际项目中， <strong>解决</strong> 一个 Promise 对象时，它的状态往往是不变的（依旧是 <strong>待定</strong> ）。 因为在设计某个需求函数为异步函数时，该异步函数往往是需要多个异步任务按序执行的。 所以异步函数返回的 Promise 对象，经常与其他的 Promise 对象 <strong>锁定</strong>，而状态保持 <strong>待定</strong>。 比如下面代码:</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reason)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,36),e=[l];function h(k,p,r,o,d,g){return a(),i("div",null,e)}const y=s(t,[["render",h]]);export{c as __pageData,y as default};
